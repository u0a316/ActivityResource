package io.github.u0a316.listmyapps

import android.Manifest
import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import android.os.*
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import java.io.File
import java.io.OutputStream

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Meminta izin untuk Android 6+ (dibutuhkan untuk akses penyimpanan)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), 1)
            }
        }

        setContent {
            AppUI()
        }
    }

    @Composable
    fun AppUI() {
        var isGenerated by remember { mutableStateOf(checkIfFileExists()) }
       LaunchedEffect(isGenerated) {
        if (isGenerated) {
            Toast.makeText(this@MainActivity, "File sudah ada! 🗿", Toast.LENGTH_SHORT).show()
        }
    }

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.Center
        ) {
            Button(
                onClick = {
                    if (!isGenerated) {
                        generateActivityFile()
                        isGenerated = true
                    }
                },
                modifier = Modifier.padding(16.dp)
            ) {
                Text("Backup daftar aplikasi pengguna 💾")
            }

            if (isGenerated) {
                Text(
                    text = "File saved in 📁 /sdcard/Documents/.listmyapps/app_activity.txt",
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
    }

    private fun checkIfFileExists(): Boolean {
        val folderName = ".listmyapps"
        val fileName = "app_activity.txt"

        val filePath = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
            "$folderName/$fileName"
        )

        return filePath.exists() // Cek apakah file sudah ada
    }

    private fun generateActivityFile() {
        val pm: PackageManager = packageManager
        val installedApps = pm.getInstalledPackages(0)
            .filter { it.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM == 0 } // Hanya aplikasi pengguna

        val folderName = ".listmyapps"
        val fileName = "app_activity.txt"

        val folder = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS), folderName)
        if (!folder.exists()) {
            folder.mkdirs() // Buat folder jika belum ada
        }

        val file = File(folder, fileName)
        if (file.exists()) {
            // Jika file sudah ada, tampilkan pesan dan keluar
            runOnUiThread {
                Toast.makeText(this, "File sudah ada! 🗿", Toast.LENGTH_SHORT).show()
            }
            return
        }

        // Jika file belum ada, buat baru
        file.createNewFile()

        file.outputStream().use { outputStream ->
            writeToFile(outputStream, installedApps, pm)
        }

        runOnUiThread {
            Toast.makeText(this, "File berhasil disimpan! 😃", Toast.LENGTH_SHORT).show()
        }
    }

    private fun writeToFile(outputStream: OutputStream, installedApps: List<android.content.pm.PackageInfo>, pm: PackageManager) {
    outputStream.bufferedWriter().use { writer ->
        val sortedApps = installedApps.sortedWith(
            compareBy<android.content.pm.PackageInfo> { pm.getApplicationLabel(it.applicationInfo).toString().any { c -> c.isDigit() } }
                .thenBy { pm.getApplicationLabel(it.applicationInfo).toString() }
        )

        for (packageInfo in sortedApps) {
            val appName = pm.getApplicationLabel(packageInfo.applicationInfo).toString()
            val packageName = packageInfo.packageName
            val mainActivity = pm.getLaunchIntentForPackage(packageName)?.component?.className ?: "N/A"
            writer.write("$appName|$packageName/$mainActivity\n")
        }
     }
   }
}